(()=>{"use strict";var e={141:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.STree=t.SNode=void 0;class r{constructor(e){this.name=e.name,this.childs=[];const t=r.getDefaultClass(this.name),a=r.filterClass(r.getIsMod(this.name),r.getMod(this.name),t),n=r.filterClass(e.isVertical||!1,r.getVerticalMod,t),i=r.filterClass(r.getIsInterval(this.name),r.getInterValMod,t);this.elem=r.addClasses(r.createNodeElem(e.elementType),[a,n,i].reduce(((e,t)=>t(e)),[r.setPrefix(t)]))}}t.SNode=r,r.prefix="ui-slider__",r.getDefaultClass=e=>(e.match(/\w+(?=Start|End)/)||[e])[0].replace(/([A-Z])/g,(e=>`-${e.toLowerCase()}`)),r.filterClass=(e,t,a)=>n=>e?[...n,r.setPrefix(t(a))]:n,r.getIsMod=e=>!!(e.match(/[S|s]tart|[E|e]nd/)||[])[0],r.getMod=e=>t=>`${t}_${(e.match(/Start|End/)||["whoops"])[0].toLowerCase()}`,r.getVerticalMod=e=>`${e}_vertical`,r.getIsInterval=e=>!!(e.match(/track|progress[B|b]ar/)||[])[0],r.getInterValMod=e=>`${e}_interval`,r.setPrefix=e=>`${r.prefix}${e}`,r.addClasses=(e,t)=>(e.classList.add(...t),e),r.createNodeElem=e=>document.createElement(e);class a{constructor(e){this.root=e}findNode(e,t=this.root){if(!t)return null;if(t.name===e)return t;for(const r of t.childs){const t=this.findNode(e,r);if(t)return t}return null}addChilds(e,...t){return e&&t.forEach((t=>e.childs.push(t))),this}add(e,...t){return this.addChilds(this.findNode(e),...t.reduce(((e,t)=>t?[...e,new r(t)]:e),[]))}static create(e){return new a(new r(e))}}t.STree=a},451:function(e,t,r){var a=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const n=r(141),i=a(r(247)),s=a(r(469));jQuery.fn.slider=function(e={},...t){if(!this.attr("id"))return this;if("object"==typeof e){const t=!!e.interval,r=!!e.vertical,a=n.STree.create({elementType:"div",name:"foremostContainer",isVertical:r}).add("foremostContainer",{elementType:"div",name:"mainContainer",isVertical:r},{elementType:"div",name:"scale",isVertical:r}).add("mainContainer",{elementType:"div",name:"container",isVertical:r}).add("container",{elementType:"div",name:"track",isVertical:r},{elementType:"button",name:"buttonStart",isVertical:r},{elementType:"div",name:"displayStart",isVertical:r},t&&{elementType:"button",name:"buttonEnd",isVertical:r},t&&{elementType:"div",name:"displayEnd",isVertical:r}).add("track",{elementType:"div",name:"progressBarStart",isVertical:r},t&&{elementType:"div",name:"progressBarEnd",isVertical:r}),l=s.default(a.root);this[0].insertAdjacentElement("beforeend",i.default(a.root)),l.foremostContainer.dataset.interval=String(t)}return this}},469:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=(e,t={})=>(e.childs.forEach((e=>r(e,t))),t[e.name]=e.elem,t);t.default=r},247:(e,t)=>{Object.defineProperty(t,"__esModule",{value:!0});const r=e=>e.childs.reduce(((e,t)=>t?(e.insertAdjacentElement("beforeend",r(t)),e):e),e.elem);t.default=r}},t={};!function r(a){var n=t[a];if(void 0!==n)return n.exports;var i=t[a]={exports:{}};return e[a].call(i.exports,i,i.exports,r),i.exports}(451)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,