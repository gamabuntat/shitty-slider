(()=>{"use strict";var t={10:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.default=class{constructor(){this.events={}}on(t,i){return(this.events[t]||(this.events[t]=[])).push(i),this}emit(t,...i){(this.events[t]||[]).slice().forEach((t=>t(i)))}}},458:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.default=class{constructor(t,i,e){this.relativePos=t,this.maxExtreme=i,this.minExtreme=e}}},667:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const n=s(e(458));i.default=class{constructor(t,i,e,s,{vertical:o=!1,interval:a=!1,displayVisibility:r=!0,scaleVisibility:h=!0,min:l=0,max:c=10,step:u=1}){this.isVertical=o,this.isInterval=a,this.displayVisibility=r,this.scaleVisibility=h,this.min=+l,this.max=+c,this.step=+u,this.trackCoord=t.getBoundingClientRect()[this.isVertical?"y":"x"]+(this.isVertical?window.pageYOffset:window.pageXOffset),this.buttonW=i.getBoundingClientRect().width,this.trackSize=t.getBoundingClientRect()[this.isVertical?"height":"width"],this.relativeButtonW=this.buttonW/this.trackSize,this.displaySize=s.getBoundingClientRect()[this.isVertical?"height":"width"],this.relativeDisplaySize=this.displaySize/this.trackSize,this.buttonS=new n.default(-1/0,1,0),this.buttonE=e?new n.default(1/0,1,0):this.buttonS}}},938:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.default=class{constructor(t,i,e,s,n){this.scale=t,this.buttonS=i,this.buttonE=e,this.service=s,this.track=n,this.service.on("sendButtonData",this.calcButtonPosition.bind(this)).on("sendButtonApi",this.calcButtonPositionApi.bind(this)).on("sendDisplayData",this.moveDisplay.bind(this)).on("changeValue",this.changeValue.bind(this)).on("changeSize",this.changeSize.bind(this)).on("sendScaleData",this.fillValues.bind(this)).on("toggleScaleVisibility",this.toggleScaleVisibility.bind(this)).on("toggleDisplayVisibility",this.toggleDisplayVisibility.bind(this)),this.track.on("clickOnTrack",this.determineButton.bind(this)).on("movemove",this.getButtonData.bind(this)).on("definePointer",this.fixPointer.bind(this)).on("resizeTrack",this.updateSizes.bind(this)),this.buttonE?[this.buttonS,this.buttonE].forEach((t=>{t.button.on("pointerDown",this.determineButton.bind(this)).on("moveButton",this.getButtonData.bind(this)).on("updatePosition",this.saveLastPosition.bind(this))})):this.buttonS.button.on("moveButton",this.getButtonData.bind(this)).on("updatePosition",this.saveLastPosition.bind(this))}getOptions(){return this.service.getOptions()}validateButtonPosition(t,i){this.service.validateButtonPosition(t,i)}updateVisibility(t){this.service.updateVisibility(t)}determineButton([t]){this.service.determineButton(t)}getButtonData([t]){this.service.sendButtonData(t)}getActiveButton(){return this[this.service.getActiveButton()]||this.buttonS}fixPointer([t]){this.getActiveButton().button.fixPointer(t)}calcButtonPosition([t,i,e,s,n]){this.getActiveButton().button.calcPosition(t,i,e,s,n)}calcButtonPositionApi([t,i,e,s,n]){this.getActiveButton().button.calcPositionApi(t,i,e,s,n)}moveDisplay([t,i,e,s]){this.getActiveButton().display.moveDisplay(t,i,e,s)}changeValue([t,i,e,s]){this.getActiveButton().display.changeValue(t,i,e,s)}toggleDisplayVisibility(){this.buttonS.display.toggleVisibility(),this.buttonE&&this.buttonE.display.toggleVisibility()}changeSize([t,i]){this.getActiveButton().progressBar.changeSize(t,i)}fillValues([t,i,e]){this.scale.fillValues(t,i,e)}toggleScaleVisibility(){this.scale.toggleVisibility()}saveLastPosition([t]){this.service.saveLastPosition(t)}updateSizes([t,i]){this.service.updateSizes(t,i)}init(){return this.service.init(),this}}},598:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.default=class{constructor(t,i,e){this.button=t,this.display=i,this.progressBar=e}}},68:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const n=s(e(10));class o extends n.default{constructor(t){super(),this.m=t,this.activeButton=["buttonS","buttonE"]}getOptions(){return{interval:this.m.isInterval,vertical:this.m.isVertical,displayVisibility:this.m.displayVisibility,scaleVisibility:this.m.scaleVisibility,min:this.m.min,max:this.m.max,step:this.m.step}}validateButtonPosition(t,i){(this.m.isInterval||"buttonE"!=t)&&(this.m.isInterval&&this.activeButton[0]!=t&&this.activeButton.reverse(),this.emit("sendButtonApi",Math.min(this.m.max,Math.max(i,this.m.min)),this.m.max,this.m.min,this.m[this.activeButton[0]].maxExtreme,this.m[this.activeButton[0]].minExtreme))}updateVisibility(t){const i="scale"==t?"scaleVisibility":"displayVisibility";this.m[i]=!this.m[i],this.emit(`toggle${i[0].toUpperCase()}${i.slice(1)}`)}determineButton(t){let i=(t-this.m.trackCoord)/this.m.trackSize;this.m.isVertical&&(i=1-i),this.activeButton.reduce(((t,e)=>Math.abs(i-(this.m[e].relativePos+this.m.relativeButtonW*("buttonS"==e?-.5:.5)))-t),0)<0&&this.activeButton.reverse()}setExtremes(){this.m.buttonS.maxExtreme=this.m.buttonE.relativePos,this.m.buttonE.minExtreme=this.m.buttonS.relativePos}sendButtonData(t){this.emit("sendButtonData",t,this.m[this.activeButton[0]].maxExtreme,this.m[this.activeButton[0]].minExtreme,this.m.trackCoord,this.m.trackSize)}sendDisplayData(){this.emit("sendDisplayData",this.m[this.activeButton[0]].relativePos,this.m.trackSize,this.m.isInterval?this.m[this.activeButton[0]].maxExtreme:1/0,this.m[this.activeButton[0]].minExtreme),this.emit("changeValue",this.m[this.activeButton[0]].relativePos,this.m.min,this.m.max,this.m.step)}sendProgressBarData(){this.emit("changeSize",this.m[this.activeButton[0]].relativePos,this.m.relativeButtonW)}sendScaleData(){this.emit("sendScaleData",this.m.max,this.m.min,this.m.step)}getActiveButton(){return this.activeButton[0]}saveLastPosition(t){let i=(t-this.m.trackCoord)/this.m.trackSize;this.m.isVertical&&(i=1-i),this.m[this.activeButton[0]].relativePos=i,this.m.isInterval&&this.setExtremes(),this.sendDisplayData(),this.sendProgressBarData()}updateSizes(t,i){this.m.trackSize=t,this.m.trackCoord=i,this.m.relativeButtonW=this.m.buttonW/t,this.m.relativeDisplaySize=this.m.displaySize/t}init(){this.sendButtonData(this.m.isVertical?1/0:-1/0),this.sendDisplayData(),this.m.isInterval&&(this.activeButton.reverse(),this.sendButtonData(this.m.isVertical?-1/0:1/0),this.sendDisplayData()),this.m.displayVisibility||this.emit("toggleDisplayVisibility"),this.m.scaleVisibility||this.emit("toggleScaleVisibility"),this.sendScaleData()}}i.default=o},42:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const n=s(e(541));class o extends n.default{constructor(t,i,e,s){super(t,i),this.transformOffset=e,this.offset=s,this.width=this.getRect().width,this.shift=this.width/2,this.component.style.transform=`translate${this.orient.coord.toUpperCase()}(\n        ${e*(this.orient.isVertical?-1:1)}px\n      )`,this.bindEventListeners()}bindEventListeners(){this.component.addEventListener("pointerdown",this.pointerDownHandler.bind(this)),this.component.addEventListener("lostpointercapture",this.pointerLostHandler.bind(this)),this.component.addEventListener("pointermove",this.pointerMoveHandler.bind(this))}pointerDownHandler(t){this.toggleTrigger(),this.setShift(t[this.orient.coord]),this.fixPointer(t.pointerId),this.emit("pointerDown",t[this.orient.coord]+(this.orient.isVertical?window.pageYOffset:window.pageXOffset))}pointerLostHandler(){this.toggleTrigger(),this.setDefaultShift()}pointerMoveHandler(t){n.default.isTriggerd&&this.emit("moveButton",t[this.orient.coord])}setShift(t){this.shift=t-this.getRect()[this.orient.coord],this.orient.isVertical&&(this.shift=this.width-this.shift)}setDefaultShift(){this.shift=this.width/2}fixPointer(t){this.component.setPointerCapture(t)}calcPosition(t,i,e,s,n){const o=(t+(this.orient.isVertical?window.pageYOffset:window.pageXOffset)-s+(this.shift+this.transformOffset)*(this.orient.isVertical?1:-1))/n,a=Math.min(i,Math.max(this.orient.isVertical?1-o:o,e));this.moveButton(a)}calcPositionApi(t,i,e,s,n){const o=(t-e)/(i-e);this.moveButton(Math.min(s,Math.max(o,n)))}moveButton(t){this.component.style[this.orient.styleCoord]=100*t+"%",this.emit("updatePosition",this.getRect()[this.orient.coord]+this.offset+(this.orient.isVertical?window.pageYOffset:window.pageXOffset))}}i.default=o},366:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const n=s(e(541));class o extends n.default{constructor(t,i,e,s){super(t,i),this.offset=e,this.displayDeflexion=(this.getRect()[this.orient.size]-s)/2,this.component.style.transform=`translate${this.orient.coord.toUpperCase()}(\n        ${(this.offset-this.displayDeflexion)*(this.orient.isVertical?-1:1)}px\n      )`}moveDisplay(t,i,e,s){const n=2*this.displayDeflexion/i;0==this.offset?e=1/0:s=-1/0;const o=Math.min(e-n,Math.max(t,s+n));this.component.style[this.orient.styleCoord]=100*o+"%"}changeValue(t,i,e,s){const n=Math.min(Math.round(t*((e-i)/s))*s+i,e).toFixed(this.defineDecimalPlaces(s));this.component.innerHTML=parseFloat(n).toString()}}i.default=o},610:(t,i)=>{Object.defineProperty(i,"__esModule",{value:!0}),i.default=class{constructor(t){this.isVertical=t,this.coord=t?"y":"x",this.styleCoord=t?"bottom":"left",this.size=t?"height":"width"}}},262:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const n=s(e(541));class o extends n.default{constructor(t,i,e,s){super(t,i),this.referencePoint=e,this.offset=s}changeSize(t,i){const e=Math.abs(this.referencePoint-t)-i*this.offset/2;this.component.style[this.orient.size]=100*e+"%"}}i.default=o},549:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const n=s(e(541));class o extends n.default{constructor(t,i,e){super(t,i),this.nValues=5,this.values=Array(this.nValues).fill(0).map((()=>this.createElement())),this.values.forEach((t=>this.component.insertAdjacentElement("beforeend",t))),t.style.padding=`${e*(i.isVertical?.5:0)}px \n      ${e*(i.isVertical?0:.5)}px`}createElement(){return document.createElement("span")}fillValues(t,i,e){this.values.reduce(((s,n)=>{const o=s.toFixed(this.defineDecimalPlaces(e));return n.innerHTML=parseFloat(o).toString(),s+(t-i)/(this.nValues-1)}),i)}}i.default=o},111:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const n=s(e(541));class o extends n.default{constructor(t,i,e){super(t,i),this.buttonW=e,this.transform(this.buttonW/this.getRect()[this.orient.size]),this.bindEventListeners(),this.resizeObserver=new ResizeObserver(this.resizeHandler.bind(this)),this.resizeObserver.observe(this.component)}bindEventListeners(){window.addEventListener("resize",this.resizeHandler.bind(this)),this.component.addEventListener("pointerdown",this.pointerDownHandler.bind(this))}pointerDownHandler(t){this.toggleTrigger(),this.emit("clickOnTrack",t[this.orient.coord]+(this.orient.isVertical?window.pageYOffset:window.pageXOffset)),this.emit("movemove",t[this.orient.coord]),this.emit("definePointer",t.pointerId)}transform(t){this.component.style.transform=`scale${this.orient.coord.toUpperCase()}(${1+t})`}resizeHandler(){this.transform(0);const t=this.getRect()[this.orient.size];this.emit("resizeTrack",t,this.getRect()[this.orient.coord]+(this.orient.isVertical?window.pageYOffset:window.pageXOffset)),this.transform(this.buttonW/t)}}i.default=o},541:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const n=s(e(10));class o extends n.default{constructor(t,i){super(),this.component=t,this.orient=i}toggleTrigger(){o.isTriggerd=!o.isTriggerd}getRect(){return this.component.getBoundingClientRect()}defineDecimalPlaces(t){if(Math.abs(t)-Math.abs(Math.trunc(t))==0)return 0;const i=t.toString(),e=(i.match(/\d+$/)||[])[0];return i.includes("e")?+e:+e.length}toggleVisibility(){const t=[...this.component.classList].find((t=>!(t.match(/(?<!_)_(?!_)/)||[])[0]));t&&this.component.classList.toggle(`${t}_hide`)}}i.default=o,o.isTriggerd=!1},465:function(t,i,e){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(i,"__esModule",{value:!0});const n=s(e(68)),o=s(e(667)),a=s(e(111)),r=s(e(42)),h=s(e(366)),l=s(e(262)),c=s(e(549)),u=s(e(610)),d=s(e(598)),m=s(e(938));!function(t){const i={};t.fn.slider=function(t={},...e){const s=this.attr("id");if(!s)return this;if("object"==typeof t){this[0].innerHTML="";const e=!0===(null==t?void 0:t.interval),f=!0===(null==t?void 0:t.vertical),p=new u.default(f),v=[["div","ui-slider__foremost-container"],["div","ui-slider__main-container"],["div","ui-slider__scale"],["div","ui-slider__container"],["div","ui-slider__track"],["button","ui-slider__button_start"],["div","ui-slider__display_start"],["div","ui-slider__progress-bar_start"],e&&["button","ui-slider__button_end"],e&&["div","ui-slider__display_end"],e&&["div","ui-slider__progress-bar_end"]].filter((t=>t)).map((t=>function([t,i]){const e=document.createElement(t);return e.classList.add(i),e}(t)));v.reduce(((t,i,e)=>([...i.classList].find((t=>t.includes("progress")))&&(t=v[4]),t.append(i),2==e?v[1]:e>=3?v[3]:v[0])),this[0]),v.forEach((t=>{const i=t.classList[0].replace(/((?<!\_)\_[^\_]+|\_$)/,"");t.classList.add(i),f&&t.classList.add(`${i}_vertical`)}));const[,g,b,,_,y,B,V,w=!1,D=!1,x=!1]=v,P=y.getBoundingClientRect().width;g.style.padding=f?P*(e?1:.5)+"px 0":`0 ${P*(e?1:.5)}px`,i[s]=new m.default(new c.default(b,p,P),new d.default(new r.default(y,p,P*(e?-1:-.5),P*(e&&f?0:e?1:.5)),new h.default(B,p,P*(e?-1:-.5),P),new l.default(V,p,0,e?1:0)),w&&D&&x&&new d.default(new r.default(w,p,0,P*(f?1:0)),new h.default(D,p,0,P),new l.default(x,p,1,e?1:0)),new n.default(new o.default(_,y,w,B,t)),new a.default(_,p,P*(e?1:0))).init()}else if("option"==t){if("get"==e[0])return i[s].getOptions();"move"==e[0]?setTimeout((()=>i[s].validateButtonPosition(e[1],e[2])),0):"toggleVisibility"==e[0]&&i[s].updateVisibility(e[1])}return this}}(jQuery)}},i={};!function e(s){var n=i[s];if(void 0!==n)return n.exports;var o=i[s]={exports:{}};return t[s].call(o.exports,o,o.exports,e),o.exports}(465)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,