(()=>{"use strict";var t={141:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.STree=e.SNode=void 0;class i{constructor(t){this.name=t.name,this.childs=[];const e=i.getDefaultClass(this.name),s=i.filterClass(i.getIsMod(this.name),i.getMod(this.name),e),n=i.filterClass(t.isVertical||!1,i.getVerticalMod,e),o=i.filterClass(t.isInterval||!1,i.getInterValMod,e);this.elem=i.addClasses(i.createNodeElem(t.elementType),[s,n,o].reduce(((t,e)=>e(t)),[i.setPrefix(e)]))}}e.SNode=i,i.prefix="ui-slider__",i.getDefaultClass=t=>(t.match(/\w+(?=[S|s]tart|[E|e]nd)/)||[t])[0].replace(/((?<=.)[A-Z])/g,"-$&").toLowerCase(),i.filterClass=(t,e,s)=>n=>t?[...n,i.setPrefix(e(s))]:n,i.getIsMod=t=>!!(t.match(/[S|s]tart|[E|e]nd/)||[])[0],i.getMod=t=>e=>`${e}_${(t.match(/Start|End/)||["whoops"])[0].toLowerCase()}`,i.getVerticalMod=t=>`${t}_vertical`,i.getInterValMod=t=>`${t}_interval`,i.setPrefix=t=>`${i.prefix}${t}`,i.addClasses=(t,e)=>(t.classList.add(...e),t),i.createNodeElem=t=>document.createElement(t);class s{constructor(t){this.root=t}findNode(t,e=this.root){if(!e)return null;if(e.name===t)return e;for(const i of e.childs){const e=this.findNode(t,i);if(e)return e}return null}addChilds(t,...e){return t&&e.forEach((e=>t.childs.push(e))),this}add(t,...e){return this.addChilds(this.findNode(t),...e.reduce(((t,e)=>e?[...t,new i(e)]:t),[]))}static create(t){return new s(new i(t))}}e.STree=s},10:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(){this.events={}}on(t,e){return(this.events[t]||(this.events[t]=[])).push(e),this}emit(t,...e){(this.events[t]||[]).slice().forEach((t=>t(e)))}}},458:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e,i){this.relativePos=t,this.maxExtreme=e,this.minExtreme=i}}},667:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(458));e.default=class{constructor(t,e,i,s,{vertical:o=!1,interval:a=!1,displayVisibility:r=!0,scaleVisibility:l=!0,min:h=0,max:d=10,step:c=1}){this.isVertical=o,this.isInterval=a,this.displayVisibility=r,this.scaleVisibility=l,this.min=+h,this.max=+d,this.step=+c,this.trackCoord=t.getBoundingClientRect()[this.isVertical?"y":"x"]+(this.isVertical?window.pageYOffset:window.pageXOffset),this.buttonW=e.getBoundingClientRect().width,this.trackSize=t.getBoundingClientRect()[this.isVertical?"height":"width"],this.relativeButtonW=this.buttonW/this.trackSize,this.displaySize=s.getBoundingClientRect()[this.isVertical?"height":"width"],this.relativeDisplaySize=this.displaySize/this.trackSize,this.buttonS=new n.default(-1/0,1,0),this.buttonE=i?new n.default(1/0,1,0):this.buttonS}}},938:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e,i,s,n){this.scale=t,this.buttonS=e,this.buttonE=i,this.service=s,this.track=n,this.bindServiceListeners(),this.bindTrackListeners(),this.bindButtonListeners()}bindServiceListeners(){this.service.on("getTrackSizes",this.getTrackSizes.bind(this)).on("sendButtonData",this.calcButtonPosition.bind(this)).on("sendButtonApi",this.calcButtonPositionApi.bind(this)).on("sendDisplayData",this.moveDisplay.bind(this)).on("changeValue",this.changeValue.bind(this)).on("changeSize",this.changeSize.bind(this)).on("sendScaleData",this.fillValues.bind(this)).on("toggleScaleVisibility",this.toggleScaleVisibility.bind(this)).on("toggleDisplayVisibility",this.toggleDisplayVisibility.bind(this))}bindTrackListeners(){this.track.on("pointerDown",this.determineButton.bind(this)).on("moveButton",this.getButtonData.bind(this)).on("definePointer",this.fixPointer.bind(this)).on("resizeTrack",this.updateSizes.bind(this))}bindButtonListeners(){this.buttonE?[this.buttonS,this.buttonE].forEach((t=>t.button.on("pointerDown",this.determineButton.bind(this)).on("moveButton",this.getButtonData.bind(this)).on("updatePosition",this.saveLastPosition.bind(this)))):this.buttonS.button.on("moveButton",this.getButtonData.bind(this)).on("updatePosition",this.saveLastPosition.bind(this))}getOptions(){return this.service.getOptions()}getTrackSizes(){this.track.handleResize()}validateButtonPosition(t,e){this.service.validateButtonPosition(t,e)}updateVisibility(t){this.service.updateVisibility(t)}determineButton([t]){this.service.determineButton(t)}getButtonData([t]){this.service.sendButtonData(t)}getActiveButton(){return this[this.service.getActiveButton()]||this.buttonS}fixPointer([t]){this.getActiveButton().button.fixPointer(t)}calcButtonPosition([t,e,i,s,n]){this.getActiveButton().button.calcPosition(t,e,i,s,n)}calcButtonPositionApi([t,e,i,s,n]){this.getActiveButton().button.calcPositionApi(t,e,i,s,n)}moveDisplay([t,e,i,s]){this.getActiveButton().display.moveDisplay(t,e,i,s)}changeValue([t,e,i,s]){this.getActiveButton().display.changeValue(t,e,i,s)}toggleDisplayVisibility(){this.buttonS.display.toggleVisibility(),this.buttonE&&this.buttonE.display.toggleVisibility()}changeSize([t,e]){this.getActiveButton().progressBar.changeSize(t,e)}fillValues([t,e,i]){this.scale.fillValues(t,e,i)}toggleScaleVisibility(){this.scale.toggleVisibility()}saveLastPosition([t]){this.service.saveLastPosition(t)}updateSizes([t,e]){this.service.updateSizes(t,e)}init(){return this.service.init(),this}}},598:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t,e,i){this.button=t,this.display=e,this.progressBar=i}}},68:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(10));class o extends n.default{constructor(t){super(),this.m=t,this.activeButton=["buttonS","buttonE"]}getOptions(){return{interval:this.m.isInterval,vertical:this.m.isVertical,displayVisibility:this.m.displayVisibility,scaleVisibility:this.m.scaleVisibility,min:this.m.min,max:this.m.max,step:this.m.step}}getTrackSizes(){this.emit("getTrackSizes")}validateButtonPosition(t,e){(this.m.isInterval||"buttonE"!=t)&&(this.m.isInterval&&this.activeButton[0]!=t&&this.activeButton.reverse(),this.getTrackSizes(),this.emit("sendButtonApi",Math.min(this.m.max,Math.max(e,this.m.min)),this.m.max,this.m.min,this.m[this.activeButton[0]].maxExtreme,this.m[this.activeButton[0]].minExtreme))}updateVisibility(t){const e="scale"==t?"scaleVisibility":"displayVisibility";this.m[e]=!this.m[e],this.emit(`toggle${e[0].toUpperCase()}${e.slice(1)}`)}determineButton(t){let e=(t-this.m.trackCoord)/this.m.trackSize;this.m.isVertical&&(e=1-e),this.activeButton.reduce(((t,i)=>Math.abs(e-(this.m[i].relativePos+this.m.relativeButtonW*("buttonS"==i?-.5:.5)))-t),0)<0&&this.activeButton.reverse()}setExtremes(){this.m.buttonS.maxExtreme=this.m.buttonE.relativePos,this.m.buttonE.minExtreme=this.m.buttonS.relativePos}sendButtonData(t){this.getTrackSizes(),this.emit("sendButtonData",t,this.m[this.activeButton[0]].maxExtreme,this.m[this.activeButton[0]].minExtreme,this.m.trackCoord,this.m.trackSize)}sendDisplayData(){this.emit("sendDisplayData",this.m[this.activeButton[0]].relativePos,this.m.trackSize,this.m.isInterval?this.m[this.activeButton[0]].maxExtreme:1/0,this.m[this.activeButton[0]].minExtreme),this.emit("changeValue",this.m[this.activeButton[0]].relativePos,this.m.min,this.m.max,this.m.step)}sendProgressBarData(){this.emit("changeSize",this.m[this.activeButton[0]].relativePos,this.m.relativeButtonW)}sendScaleData(){this.emit("sendScaleData",this.m.max,this.m.min,this.m.step)}getActiveButton(){return this.activeButton[0]}saveLastPosition(t){let e=(t-this.m.trackCoord)/this.m.trackSize;this.m.isVertical&&(e=1-e),this.m[this.activeButton[0]].relativePos=e,this.m.isInterval&&this.setExtremes(),this.sendDisplayData(),this.sendProgressBarData()}updateSizes(t,e){this.m.trackSize=t,this.m.trackCoord=e,this.m.relativeButtonW=this.m.buttonW/t,this.m.relativeDisplaySize=this.m.displaySize/t}init(){this.sendButtonData(this.m.isVertical?1/0:-1/0),this.sendDisplayData(),this.m.isInterval&&(this.activeButton.reverse(),this.sendButtonData(this.m.isVertical?-1/0:1/0),this.sendDisplayData()),this.m.displayVisibility||this.emit("toggleDisplayVisibility"),this.m.scaleVisibility||this.emit("toggleScaleVisibility"),this.sendScaleData()}}e.default=o},42:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(541));class o extends n.default{constructor(t,e,i,s){super(t,e),this.transformOffset=i,this.offset=s,this.width=this.getRect().width,this.shift=this.width/2,this.component.style.transform=`translate${this.orient.coord.toUpperCase()}(\n        ${i*(this.orient.isVertical?-1:1)}px\n      )`,this.bindEventListeners()}bindEventListeners(){this.component.addEventListener("pointerdown",this.handleButtonPointerDown.bind(this)),this.component.addEventListener("lostpointercapture",this.handleButtonLostPointer.bind(this)),this.component.addEventListener("pointermove",this.handleButtonPointerMove.bind(this))}handleButtonPointerDown(t){n.default.toggleTrigger(),this.setShift(t[this.orient.coord]),this.fixPointer(t.pointerId),this.emit("pointerDown",t[this.orient.coord]+(this.orient.isVertical?window.pageYOffset:window.pageXOffset))}handleButtonLostPointer(){n.default.toggleTrigger(),this.setDefaultShift()}handleButtonPointerMove(t){n.default.isTriggerd&&this.emit("moveButton",t[this.orient.coord])}setShift(t){this.shift=t-this.getRect()[this.orient.coord],this.orient.isVertical&&(this.shift=this.width-this.shift)}setDefaultShift(){this.shift=this.width/2}fixPointer(t){this.component.setPointerCapture(t)}calcPosition(t,e,i,s,n){const o=(t+(this.orient.isVertical?window.pageYOffset:window.pageXOffset)-s+(this.shift+this.transformOffset)*(this.orient.isVertical?1:-1))/n,a=Math.min(e,Math.max(this.orient.isVertical?1-o:o,i));this.moveButton(a)}calcPositionApi(t,e,i,s,n){const o=(t-i)/(e-i);this.moveButton(Math.min(s,Math.max(o,n)))}moveButton(t){this.component.style[this.orient.styleCoord]=100*t+"%",this.emit("updatePosition",this.getRect()[this.orient.coord]+this.offset+(this.orient.isVertical?window.pageYOffset:window.pageXOffset))}}e.default=o},366:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(541));class o extends n.default{constructor(t,e,i,s){super(t,e),this.offset=i,this.displayDeflexion=(this.getRect()[this.orient.size]-s)/2,this.component.style.transform=`translate${this.orient.coord.toUpperCase()}(\n        ${(this.offset-this.displayDeflexion)*(this.orient.isVertical?-1:1)}px\n      )`}moveDisplay(t,e,i,s){const n=2*this.displayDeflexion/e;0==this.offset?i=1/0:s=-1/0;const o=Math.min(i-n,Math.max(t,s+n));this.component.style[this.orient.styleCoord]=100*o+"%"}changeValue(t,e,i,s){const o=Math.min(Math.round(t*((i-e)/s))*s+e,i).toFixed(n.default.defineDecimalPlaces(s));this.component.innerHTML=String(parseFloat(o))}}e.default=o},610:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0}),e.default=class{constructor(t){this.isVertical=t,this.coord=t?"y":"x",this.styleCoord=t?"bottom":"left",this.size=t?"height":"width"}}},262:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(541));class o extends n.default{constructor(t,e,i,s){super(t,e),this.referencePoint=i,this.offset=s}changeSize(t,e){const i=Math.abs(this.referencePoint-t)-e*this.offset/2;this.component.style.flexBasis=100*i+"%"}}e.default=o},549:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(541));class o extends n.default{constructor(t,e,i){super(t,e),this.nValues=5,this.values=Array(this.nValues).fill(0).map((()=>this.createElement())),this.values.forEach((t=>this.component.insertAdjacentElement("beforeend",t))),t.style.padding=`${i*(e.isVertical?.5:0)}px \n      ${i*(e.isVertical?0:.5)}px`}createElement(){return document.createElement("span")}fillValues(t,e,i){this.values.reduce(((s,o)=>{const a=s.toFixed(n.default.defineDecimalPlaces(i));return o.innerHTML=String(parseFloat(a)),s+(t-e)/(this.nValues-1)}),e)}}e.default=o},111:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(541));class o extends n.default{constructor(t,e,i){super(t,e),this.buttonW=i,this.transform(this.buttonW/this.getRect()[this.orient.size]),this.bindEventListeners(),this.resizeObserver=new ResizeObserver(this.handleResize.bind(this)),this.resizeObserver.observe(this.component)}bindEventListeners(){window.addEventListener("resize",this.handleResize.bind(this)),this.component.addEventListener("pointerdown",this.handleTrackPointerDown.bind(this))}handleTrackPointerDown(t){n.default.toggleTrigger(),this.emit("pointerDown",t[this.orient.coord]+(this.orient.isVertical?window.pageYOffset:window.pageXOffset)),this.emit("moveButton",t[this.orient.coord]),this.emit("definePointer",t.pointerId)}transform(t){this.component.style.transform=`scale${this.orient.coord.toUpperCase()}(${1+t})`}handleResize(){this.transform(0);const t=this.getRect()[this.orient.size];this.emit("resizeTrack",t,this.getRect()[this.orient.coord]+(this.orient.isVertical?window.pageYOffset:window.pageXOffset)),this.transform(this.buttonW/t)}}e.default=o},541:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=s(i(10));class o extends n.default{constructor(t,e){super(),this.component=t,this.orient=e}static toggleTrigger(){o.isTriggerd=!o.isTriggerd}static defineDecimalPlaces(t){if(Math.abs(t)-Math.abs(Math.trunc(t))==0)return 0;const e=String(t),i=(e.match(/\d+$/)||[])[0];return e.includes("e")?+i:+i.length}getRect(){return this.component.getBoundingClientRect()}toggleVisibility(){const t=[...this.component.classList].find((t=>!(t.match(/(?<!_)_(?!_)/)||[])[0]));t&&this.component.classList.toggle(`${t}_hide`)}}e.default=o,o.isTriggerd=!1},469:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});const i=(t,e={})=>(t.childs.forEach((t=>i(t,e))),e[t.name]=t.elem,e);e.default=i},247:(t,e)=>{Object.defineProperty(e,"__esModule",{value:!0});const i=t=>t.childs.reduce(((t,e)=>e?(t.insertAdjacentElement("beforeend",i(e)),t):t),t.elem);e.default=i},465:function(t,e,i){var s=this&&this.__importDefault||function(t){return t&&t.__esModule?t:{default:t}};Object.defineProperty(e,"__esModule",{value:!0});const n=i(141),o=s(i(247)),a=s(i(469)),r=s(i(68)),l=s(i(667)),h=s(i(111)),d=s(i(42)),c=s(i(366)),u=s(i(262)),m=s(i(549)),f=s(i(610)),p=s(i(938)),v=s(i(598));!function(t){const e={};t.fn.slider=function(t={},...i){const s=this.attr("id");if(!s)return this;if("object"==typeof t){this[0].innerHTML="";const i=!!t.interval,g=!!t.vertical,b=n.STree.create({elementType:"div",name:"foremostContainer",isVertical:g}).add("foremostContainer",{elementType:"div",name:"mainContainer",isVertical:g},{elementType:"div",name:"scale",isVertical:g}).add("mainContainer",{elementType:"div",name:"container",isVertical:g}).add("container",{elementType:"div",name:"track",isVertical:g,isInterval:i},{elementType:"button",name:"buttonStart",isVertical:g},{elementType:"div",name:"displayStart",isVertical:g},i&&{elementType:"button",name:"buttonEnd",isVertical:g},i&&{elementType:"div",name:"displayEnd",isVertical:g}).add("track",{elementType:"div",name:"progressBarStart",isVertical:g,isInterval:i},i&&{elementType:"div",name:"progressBarEnd",isVertical:g,isInterval:i});this[0].insertAdjacentElement("beforeend",o.default(b.root));const y=a.default(b.root),B=new f.default(g),V=y.buttonStart.getBoundingClientRect().width;y.mainContainer.style.padding=g?V*(i?1:.5)+"px 0":`0 ${V*(i?1:.5)}px`;const S={buttonS:{transformOffset:V*(i?-1:-.5),offset:V*(i&&g?0:i?1:.5)},buttonE:{offset:V*(g?1:0)},displayS:V*(i?-1:-.5),progress:i?1:0};e[s]=new p.default(new m.default(y.scale,B,V),new v.default(new d.default(y.buttonStart,B,S.buttonS.transformOffset,S.buttonS.offset),new c.default(y.displayStart,B,S.displayS,V),new u.default(y.progressBarStart,B,0,S.progress)),i&&new v.default(new d.default(y.buttonEnd,B,0,S.buttonE.offset),new c.default(y.displayEnd,B,0,V),new u.default(y.progressBarEnd,B,1,S.progress)),new r.default(new l.default(y.track,y.buttonStart,y.buttonEnd||!1,y.displayStart,t)),new h.default(y.track,B,V*(i?1:0))).init()}else if("option"==t){if("get"==i[0])return e[s].getOptions();"move"==i[0]?setTimeout((()=>e[s].validateButtonPosition(i[1],i[2])),0):"toggleVisibility"==i[0]&&e[s].updateVisibility(i[1])}return this}}(jQuery)}},e={};!function i(s){var n=e[s];if(void 0!==n)return n.exports;var o=e[s]={exports:{}};return t[s].call(o.exports,o,o.exports,i),o.exports}(465)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,